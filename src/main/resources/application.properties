# General Spring Boot Properties
server.port=8080 
 # Ensure it's set to 8080 (default for Heroku)

# CORS Settings
cors.allowed-origins=*

# JWT Configuration
jwt.secret=5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437
jwt.expiration-time=600000
reftesh.token.expiration-time=30000
jwt.jobschedule-time=60000

# File Upload Paths (Heroku)
# Using temporary directory for file uploads in Heroku's filesystem
jwt.upload-path=/tmp/assets/images
jwt.slide-upload-path=/tmp/assets/Sliders

# Database Configuration (using Heroku Postgres)
# Heroku automatically provides DATABASE_URL as an environment variable, so we'll use that
spring.datasource.url=${DATABASE_URL}  # Use the Heroku-provided DATABASE_URL
spring.datasource.username=${DATABASE_USER}  # Use Heroku environment variables for credentials
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Show SQL queries for debugging
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update  # Change to 'update' to prevent schema from being recreated on each deploy

# Spring Mail Configuration (ensure you are using the correct credentials and settings)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=natea2989@gmail.com
spring.mail.password=your_gmail_app_password  # Use App Password instead of actual password for better security
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=215MB
spring.servlet.multipart.max-request-size=215MB

# Logging
logging.level.org.springframework.web=DEBUG

